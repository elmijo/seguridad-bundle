<?php

namespace ElMijo\SeguridadBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;

/**
 * UsuarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsuarioRepository extends EntityRepository implements UserProviderInterface
{
    public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->select('u, r')
            ->leftJoin('u.roles', 'r')            
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
        ;

        try
        {
            $user = $q->getSingleResult();
        }
        catch (NoResultException $e)
        {
            $message = sprintf(
                'No se encontro la entidad ElMijoSeguridadBundle:Ususario',
                $username
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class))
        {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

    public function existeUsuarioAdmin()
    {
        $q   = $this
            ->createQueryBuilder('u')
            ->select('u, r')
            ->leftJoin('u.roles', 'r')            
            ->where('r.role = :role')
            ->setParameter('role', 'ROLE_SUPER_ADMIN')
            ->getQuery()
        ;

        return !is_null($q->getOneOrNullResult());
    }

    /**
     * Metodo para verificar el username ya esta registrado
     * @param  string $username Username a evaluar
     * @return boolean
     */
    public function existeUsername($username)
    {
        $q   = $this
            ->createQueryBuilder('u')
            ->where('u.username = :username')
            ->setParameter('username', $username)
            ->getQuery()
        ;

        return !is_null($q->getOneOrNullResult());
    }

    /**
     * Metodo para veridficar si el email ya esta registrado
     * @param  string $email Correo electronico a evalUAR
     * @return boolean
     */
    public function existeEmail($email)
    {
        $q   = $this
            ->createQueryBuilder('u')
            ->where('u.email = :email')
            ->setParameter('email', $email)
            ->getQuery()
        ;

        return !is_null($q->getOneOrNullResult());
    }     

}